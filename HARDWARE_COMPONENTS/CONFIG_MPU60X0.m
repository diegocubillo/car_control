function MPU60X0 = CONFIG_MPU60X0()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%% CONFIG_MPU60X0 %%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MPU60X0.SAMPLING_TIME = 1e-03;
% ACCELEROMETER CALIBRATION
% ACCEL_CALIB: / false --> calibration offline / true --> calibration online 
MPU60X0.ACCEL_CALIB = true;
% MPU60X0.ACCEL_DCM = [...
%    9.9345e-01  -4.6110e-03   1.8912e-02   
%    2.5455e-04   9.9668e-01   2.6532e-02   
%   -2.0901e-02  -3.5522e-02   9.9139e-01 ];
MPU60X0.ACCEL_DCM = eye(3);
% MPU60X0.ACCEL_OFFS = [-9.4051e-02 1.5154e-01 9.7155e-01]'; % m/s^2
MPU60X0.ACCEL_OFFS = zeros(3,1);
% IMU calibration filter
MPU60X0.ALFA_CALIB = 0.999;

%----------------------------------------
% I2C ADDRESS
MPU60X0.ADDRESS = bin2dec('1101000');
MPU60X0.ADDRESS_WRITE = bin2dec('11010001');
MPU60X0.ADDRESS_READ = bin2dec('11010000');
%----------------------------------------
% Mask for reading (SPI)
MPU60X0.READ_FLAG = bin2dec('10000000');
%----------------------------------------
% FIFO
MPU60X0.FIFO_ENABLED = boolean(0);
MPU60X0.FIFO_LENGTH = 10;
%----------------------------------------
% SPI or I2C
% / 0. I2C / 1. SPI
MPU60X0.I2C_IF_DIS = boolean(1);
%----------------------------------------
% I2C MASTER ENABLE FOR AUXILIARY I2C (MAGNETOMETER)
MPU60X0.I2C_MST_EN = boolean(0);
%----------------------------------------
% TEMPERATURE SENSOR ENABLE
MPU60X0.TEMP_DIS = boolean(1);
%----------------------------------------
% IMU_ORIENTATION
MPU60X0.GYRO_ROTATION_MATRIX = [1 0 0 ; 0 -1 0 ; 0 0 1]; 
MPU60X0.ACCEL_ROTATION_MATRIX = [1 0 0 ; 0 -1 0 ; 0 0 -1]; 
%----------------------------------------
% ACCELEROMETER SENSITIVITY SCALE FACTOR
% MPU60X0.AFS_SEL='00':  +/- 2g
% MPU60X0.AFS_SEL='01':  +/- 4g
% MPU60X0.AFS_SEL='10':  +/- 8g
% MPU60X0. AFS_SEL='11':  +/- 16g
MPU60X0.AFS_SEL='00';
switch(bin2dec(MPU60X0.AFS_SEL))
    case 0
            MPU60X0.ACCEL_SSF=16384;         
    case 1
            MPU60X0.ACCEL_SSF=8192;         
    case 2
           MPU60X0.ACCEL_SSF=4096;         
    case 3
            MPU60X0.ACCEL_SSF=2048;         
end
%----------------------------------------
% GYROSCOPE SENSITIVITY SCALE FACTOR
% MPU60X0.FS_SEL='00':  +/- 250 dps
% MPU60X0.FS_SEL='01':  +/- 500 dps
% MPU60X0.FS_SEL='10':  +/- 1000 dps
% MPU60X0.FS_SEL='11':  +/- 2000 dps
MPU60X0.FS_SEL='00';
switch(bin2dec(MPU60X0.FS_SEL))
    case 0
            MPU60X0.GYRO_SSF=131;         
    case 1
            MPU60X0.GYRO_SSF=65.5;         
    case 2
            MPU60X0.GYRO_SSF=32.8;         
    case 3
           MPU60X0.GYRO_SSF=16.4;         
end
%----------------------------------------
% DIGITAL LOW PASS FILTER (DLPF)
% Bits [2:0] in CONFIG 
MPU60X0.DLPF_CFG='100';
% The accelerometer and gyroscope are filtered according to the value 
% shown in the table below (bits [2:0]).
% Accelerometer (Fs = 1kHz) 
% 000: BW=260Hz  (delay=0ms)
% 001: BW=184Hz  (delay=2ms)
% 010: BW=94Hz   (delay=3ms)
% 011: BW=44Hz   (delay=4.9ms)
% 100: BW=21Hz   (delay=8.5ms)
% 101: BW=10Hz   (delay=13.8ms)
% 110: BW=5Hz     (delay=19ms)
% Gyroscope
% 000: BW=256Hz  (delay=0.98ms)  Fs=8kHz
% 001: BW=188Hz  (delay=1.9ms)   Fs=1kHz
% 010: BW=96Hz   (delay=2.8ms)   Fs=1kHz
% 011: BW=42Hz   (delay=4.8ms)   Fs=1kHz
% 100: BW=20Hz   (delay=8.3ms)   Fs=1kHz
% 101: BW=10Hz   (delay=13.4ms)  Fs=1kHz
% 110: BW=5Hz    (delay=18.6ms)
%----------------------------------------
%  TEMPERATURE SENSITIVITY SCALE FACTOR
MPU60X0.TEMP_SSF = 340;
% TEMPERATURE OFFSET (DEGREES)
MPU60X0.TEMP_OFFS = 35;
%----------------------------------------
% CLOCK SOURCE
% MPU60X0.CLKSEL: Bits [2:0] in MPU60X0.PWR_MGMT_1
MPU60X0.CLKSEL='000';
% '000': Internal 8MHz oscillator
% '001': PLL with X axis gyroscope reference
% '010': PLL with Y axis gyroscope reference
% '011': PLL with Z axis gyroscope reference
% '100': PLL with external 32.768kHz
% '101': PLL with external 19.2MHz
% '110': Reserved
% '111': Stops the clock and keeps the timing generator in reset
%----------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%
% MPU-60X0 Register Map
%%%%%%%%%%%%%%%%%%%%%%%%%%
%--------------------------------------------
% SELF-TEST REGISTERS
MPU60X0.SELF_TEST_X = hex2dec('0D');
MPU60X0.SELF_TEST_X_BYTE = bin2dec('00000000');
MPU60X0.SELF_TEST_Y = hex2dec('0E');
MPU60X0.SELF_TEST_Y_BYTE = bin2dec('00000000');
MPU60X0.SELF_TEST_Z = hex2dec('0F');
MPU60X0.SELF_TEST_Z_BYTE = bin2dec('00000000');
MPU60X0.SELF_TEST_A = hex2dec('10');
MPU60X0.SELF_TEST_A_BYTE = bin2dec('00000000');
%----------------------------------------------
% SAMPLE RATE DIVIDER
% This register specifies the divider from the gyroscope output rate used 
% to generate the Sample Rate for the MPU-60X0.
% The Sample Rate is generated by dividing the gyroscope output rate 
% by SMPLRT_DIV: Sample Rate = Gyroscope Output Rate (8 kHz) / (1 + MPU60X0.SMPLRT_DIV_BYTE)
% If DLPF (digital low-pass filter) is enabled then Gyroscope Output Rate = 1 kHz
MPU60X0.SMPLRT_DIV = hex2dec('19');
if MPU60X0.FIFO_ENABLED == 0
    MPU60X0.SMPLRT_DIV_BYTE = bin2dec('00000111');
else
    SMPLRT_DIV = 1000*SAMPLING_TIME/MPU60X0.FIFO_LENGTH;
    if SMPLRT_DIV == 1
        MPU60X0.SMPLRT_DIV_BYTE = bin2dec('00000000');        
    elseif SMPLRT_DIV == 2
        MPU60X0.SMPLRT_DIV_BYTE = bin2dec('00000001');
    elseif SMPLRT_DIV == 4 
        MPU60X0.SMPLRT_DIV_BYTE = bin2dec('00000011');   
    elseif SMPLRT_DIV == 5 
        MPU60X0.SMPLRT_DIV_BYTE = bin2dec('00000100');   
    else 
        disp('ERROR IN THE FIFO LENGTH DEFINITION')
    end
end
clear SMPLRT_DIV
%---------------------------------------------------
% CONFIGURATION
MPU60X0.CONFIG = hex2dec('1A');
MPU60X0.CONFIG_BYTE = bin2dec(['00000' MPU60X0.DLPF_CFG]);
MPU60X0.GYRO_CONFIG = hex2dec('1B');
MPU60X0.GYRO_CONFIG_BYTE = bin2dec(['000' MPU60X0.FS_SEL '000']);
MPU60X0.ACCEL_CONFIG = hex2dec('1C');
MPU60X0.ACCEL_CONFIG_BYTE = bin2dec(['000' MPU60X0.AFS_SEL '000']);
%----------------------------------------
% % MOTION DETECTION THRESHOLD %%%%%%%%%% NI IDEA DE PARA QUE ES %%%%%%%%%%
% MPU60X0.MOT_THR = hex2dec('1F'); 
% MPU60X0.MOT_THR_BYTE = bin2dec('00000000');
%----------------------------------------
% FIFO ENABLE
MPU60X0.FIFO_EN = hex2dec('23');
% Enable FIFO gyro and accelerometer register
if MPU60X0.FIFO_ENABLED
    % [TEMP XG YG ZG ACCEL SLV2 SLV1 SLV0]
    MPU60X0.FIFO_EN_BYTE = bin2dec('01111000');
else
    MPU60X0.FIFO_EN_BYTE = bin2dec('00000000');
end
%----------------------------------------
% I2C CONFIGURATION
MPU60X0.I2C_MST_CTRL = hex2dec('24');
% I2C master clock frequency = 400 kHz
MPU60X0.I2C_MST_CLK = '1101'; 
MPU60X0.I2C_MST_CTRL_BYTE = bin2dec(['0000' MPU60X0.I2C_MST_CLK]);
MPU60X0.I2C_SLV0_ADDR = hex2dec('25');
MPU60X0.I2C_SLV0_ADDR_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV0_REG = hex2dec('26');
MPU60X0.I2C_SLV0_REG_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV0_CTRL = hex2dec('27');
MPU60X0.I2C_SLV0_CTRL_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV1_ADDR = hex2dec('28');
MPU60X0.I2C_SLV1_ADDR_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV1_REG = hex2dec('29');
MPU60X0.I2C_SLV1_REG_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV1_CTRL = hex2dec('2A');
MPU60X0.I2C_SLV1_CTRL_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV2_ADDR = hex2dec('2B');
MPU60X0.I2C_SLV2_ADDR_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV2_REG = hex2dec('2C');
MPU60X0.I2C_SLV2_REG_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV2_CTRL = hex2dec('2D');
MPU60X0.I2C_SLV2_CTRL_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV3_ADDR = hex2dec('2E');
MPU60X0.I2C_SLV3_ADDR_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV3_REG = hex2dec('2F');
MPU60X0.I2C_SLV3_REG_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV3_CTRL = hex2dec('30');
MPU60X0.I2C_SLV3_CTRL_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV4_ADDR = hex2dec('31');
MPU60X0.I2C_SLV4_ADDR_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV4_REG = hex2dec('32');
MPU60X0.I2C_SLV4_REG_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV4_DO = hex2dec('33');
MPU60X0.I2C_SLV4_DO_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV4_CTRL = hex2dec('34');
MPU60X0.I2C_SLV4_CTRL_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV4_DI = hex2dec('35');
MPU60X0.I2C_MST_STATUS = hex2dec('36');
%----------------------------------------
% INTERRUPTION REGISTERS
MPU60X0.INT_PIN_CFG = hex2dec('37');
MPU60X0.INT_PIN_CFG_BYTE = bin2dec('00000000');
MPU60X0.INT_ENABLE = hex2dec('38');
MPU60X0.INT_ENABLE_BYTE = bin2dec('00000000');
MPU60X0.INT_STATUS = hex2dec('3A');
%----------------------------------------
% SENSOR READOUT REGISTERS
MPU60X0.ACCEL_XOUT_H = hex2dec('3B');
MPU60X0.ACCEL_XOUT_L = hex2dec('3C');
MPU60X0.ACCEL_YOUT_H = hex2dec('3D');
MPU60X0.ACCEL_YOUT_L = hex2dec('3E');
MPU60X0.ACCEL_ZOUT_H = hex2dec('3F');
MPU60X0.ACCEL_ZOUT_L = hex2dec('40');
MPU60X0.TEMP_OUT_H = hex2dec('41');
MPU60X0.TEMP_OUT_L = hex2dec('42');
MPU60X0.GYRO_XOUT_H = hex2dec('43');
MPU60X0.GYRO_XOUT_L = hex2dec('44');
MPU60X0.GYRO_YOUT_H = hex2dec('45');
MPU60X0.GYRO_YOUT_L = hex2dec('46');
MPU60X0.GYRO_ZOUT_H = hex2dec('47');
MPU60X0.GYRO_ZOUT_L = hex2dec('48');
MPU60X0.EXT_SENS_DATA_00 = hex2dec('49');
MPU60X0.EXT_SENS_DATA_01 = hex2dec('4A');
MPU60X0.EXT_SENS_DATA_02 = hex2dec('4B');
MPU60X0.EXT_SENS_DATA_03 = hex2dec('4C');
MPU60X0.EXT_SENS_DATA_04 = hex2dec('4D');
MPU60X0.EXT_SENS_DATA_05 = hex2dec('4E');
MPU60X0.EXT_SENS_DATA_06 = hex2dec('4F');
MPU60X0.EXT_SENS_DATA_07 = hex2dec('50');
MPU60X0.EXT_SENS_DATA_08 = hex2dec('51');
MPU60X0.EXT_SENS_DATA_09 = hex2dec('52');
MPU60X0.EXT_SENS_DATA_10 = hex2dec('53');
MPU60X0.EXT_SENS_DATA_11 = hex2dec('54');
MPU60X0.EXT_SENS_DATA_12 = hex2dec('55');
MPU60X0.EXT_SENS_DATA_13 = hex2dec('56');
MPU60X0.EXT_SENS_DATA_14 = hex2dec('57');
MPU60X0.EXT_SENS_DATA_15 = hex2dec('58');
MPU60X0.EXT_SENS_DATA_16 = hex2dec('59');
MPU60X0.EXT_SENS_DATA_17 = hex2dec('5A');
MPU60X0.EXT_SENS_DATA_18 = hex2dec('5B');
MPU60X0.EXT_SENS_DATA_19 = hex2dec('5C');
MPU60X0.EXT_SENS_DATA_20 = hex2dec('5D');
MPU60X0.EXT_SENS_DATA_21 = hex2dec('5E');
MPU60X0.EXT_SENS_DATA_22 = hex2dec('5F');
MPU60X0.EXT_SENS_DATA_23 = hex2dec('60');
%----------------------------------------
% I2C SLAVE DATA
MPU60X0.I2C_SLV0_DO = hex2dec('63');
MPU60X0.I2C_SLV0_DO_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV1_DO = hex2dec('64');
MPU60X0.I2C_SLV1_DO_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV2_DO = hex2dec('65');
MPU60X0.I2C_SLV2_DO_BYTE = bin2dec('00000000');
MPU60X0.I2C_SLV3_DO = hex2dec('66');
MPU60X0.I2C_SLV3_DO_BYTE = bin2dec('00000000');
%----------------------------------------
% I2C MASTER DELAY CONTROL
MPU60X0.I2C_MST_DELAY_CTRL = hex2dec('67');
MPU60X0.I2C_MST_DELAY_CTRL_BYTE = bin2dec('00000000');
%----------------------------------------
% SIGNAL PATH RESET
MPU60X0.SIGNAL_PATH_RESET = hex2dec('68');
MPU60X0.SIGNAL_PATH_RESET_BYTE = bin2dec('00000000');
%----------------------------------------
% % MOTION DETECTION CONTROL %%%%%%%%%% NI IDEA DE PARA QUE ES %%%%%%%%%%
% MPU60X0.MOT_DETECT_CTRL = hex2dec('69'); 
% MPU60X0.MOT_DETECT_CTRL_BYTE = bin2dec('00000000');
%----------------------------------------
% USER CONTROL: FIFO and SPI enable
MPU60X0.USER_CTRL = hex2dec('6A');
MPU60X0.USER_CTRL_BYTE = bin2dec(['0' num2str([MPU60X0.FIFO_ENABLED MPU60X0.I2C_MST_EN MPU60X0.I2C_IF_DIS]) '0000']);    
%----------------------------------------
% POWER MANAGEMENT
MPU60X0.PWR_MGMT_1 = hex2dec('6B');
MPU60X0.PWR_MGMT_1_BYTE = bin2dec(['0000' num2str(MPU60X0.TEMP_DIS) MPU60X0.CLKSEL]);
MPU60X0.PWR_MGMT_2 = hex2dec('6C');
MPU60X0.PWR_MGMT_2_BYTE = bin2dec('00000000');
%----------------------------------------
% FIFO CONTROL AND INFORMATION
MPU60X0.FIFO_COUNTH = hex2dec('72');
MPU60X0.FIFO_COUNTH_BYTE = bin2dec('00000000');
MPU60X0.FIFO_COUNTL = hex2dec('73');
MPU60X0.FIFO_COUNTL_BYTE = bin2dec('00000000');
MPU60X0.FIFO_R_W = hex2dec('74');
MPU60X0.FIFO_R_W_BYTE = bin2dec('00000000');
%----------------------------------------
% WHO AM I
MPU60X0.WHO_AM_I = hex2dec('75');
MPU60X0.WHO_AM_I_BYTE=hex2dec('68');
%----------------------------------------


